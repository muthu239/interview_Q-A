What is cypress?
	Cypress is a next generation front end automation testing tool built for the modern web applications
	
How cypress is unique from other automation tools?
	Cypress automatically waits for commands and assertions before moving on. By default Cypress has a timeout of 4 seconds.
	Ability to test edge testcases by mocking the server response of APIs
	Cypress takes snapshots as your test runs. We can hover over each commands in the command log to see exactly what happened at each step.
	Because of its architectural design, cypress delivers fast, consistent and reliable test execution compared to other automation tools
	View videos of your entire tests execution when run from the cypress dashboard
	
	Cypress is built on Node.js and comes packaged as npm module
	As it is built on Node.Js, it uses javascript for writing tests. But 90% of coding can be done using cypress inbuit commands.\
	Cypress also bundles with JQuery and inherits many of JQuery methods for UI components identification
	
CyPress Pros
	Complete framework
	Very fast
	More stable
	Not require solid programming skills
	Test and Mock APIs
	Dont need test environment
	
Cypress Cons
	No IE and safari support. Only chrome and chromium engine based browsers(Edge, Mozilla)
	Asynchronous code
	No mobile but mobile view
	Single domain and single tab
	Not friendly with iframes
	
Cypress Vs Selenium[Important]?

======================================================================================================================================
Cypress architecture
	Most testing tools (Like selenium) operate by running outside of the browser and executing remote commands across the network. 
	But cypress engine directly operates inside the browser. In other words, it is the browser that is executing your test code
	This enables cypress to listen and modify the browser behavior at run time by manipulating DOM and altering network requests and responses on the fly.
	Cypress open doors to New Kind of testing having ultimate control over your application
	
Cypress components
	Test runner
	Dashboard services
	
	
===================================================================================================================================
How to open cypress test runner
	Using terminal cmd : npx cypress open (or) ./node_modules/.bin/cypress open
	
How to run cypress all test cases using cmd
	using terminal cmd : npx cypress run (or) ./node_modules/.bin/cypress run
	
How to run specific test case using cmd
	using terminal cmd : npx cypress run --record --spec "path to file"
	
How to run test case using terminal but with headed mode.
	using terminal cmd :  npx cypress run --headed (or) ./node_modules/.bin/cypress run --headed
	
How to run test case in preferred browser
	using terminal cmd : npx cypress run --browser chrome (or) ./node_modules/.bin/cypress run --browser chrome
	
Note:[Important]
	If the execution is done using cmd line, then the execution is done in headless mode and in electron browser.
	
	
	
In javascript terminology any test script is called spec file
Mocha and jasmine are some of the Javascript framework.

================================================================================================================================
Fixtures folder - should have the test data file
integration folder - all our code should be written inside the integration folder
Support folder - Reusable methods are put in the support folder
Cypress.config.js - config file for the entire framework. Created when the cypress is launched for first time
=====================================================================================================================================
Cypress prefers Mocha framework. other framework also supported

describe('My first test suite', function()
{
    it('My FirstTest Case', function(){

		//test step
    })

    it('My SecondTest Case', function(){

		//test step
    })
})

=============================================================================================================
Locators
	Cypress only supports CSS selectors
	
	CSS selector
		CSS selector is the combination of an element selector and a selector value
		CSS selector is a path pattern that can use web elements attributes to locate a web element in a webpage
		Like xpath, CSS selector can also locate web elements having no ID, class or name
		
		CSS selector - ID:
			syntax: <HTML tag><#><value of ID attribute>
			eg: input#login1 
			input#login1  is same as #login1
			
		CSS selector - Class:
			synatx : <HTML tag><.><value of Class attribute>
			eg : input.signinbtn
			input.signinbtn is same as .signinbtn
			
		CSS selector - Attribute:
			synatx : <HTML tag><[attribute = value of attribute]>
			eg : input[type='submit'], input[title = 'Sign In']
			
		wild card in CSS:
			User can use wild card characters in css selector to find the element ^,$,* are wild card characters present in the css selector in selenium
			
			^ (carrat character) : when the starting part of the attribute value is fixed
				Syntax : HTMLtag[attribute^ = 'value']
				eg : input[id^='username']
				
			$ (Dollar character) : when the ending part of the attribute value is fixed
				Syntax : HTMLtag[attribute$ = 'value']
				eg: label[abc$ = '__abcd']
				
			* (asterisk character) : when the fixed attribute value is in middle
				Syntax : HTMLtag[attribute* = 'value']
				eg: div[name* = 'username']
				
		CSS combinators
			Combinator explains the relationship between the css selectors
			4 CSS combinators are in CSS selector
			
			Descendant selector: 
				space is descendant combinator
				The descendant selector matched all elements that are descendants of a specified element
					eg : table[role='presentation'] tbody tr td label[for='email'] - Identify username on web-page.
				
			Child selector:
				> is the child selector
				the child selector selects all elements that are the immediate children of a specified element
					eg : div[class^='pvl']>div 
				
			Adjacent sibling selector:
				+ is used for the adjacent sibling combinator
				The adjacent sibling selector selects a element that is adjacent siblings of a specified element
					eg: div[id='fullname_field'] + div
					
			General sibling:
				~ is used for the general sibling combinator
				All the siblings of a defined css selector of a webpage
					eg : div[id='fullname_field'] ~ div



==============================================================================================================
cy.visit() - To launch a url
	example :  cy.visit('http://localhost:3000')
	
cy.get('locator') - Get one or more DOM elements by node name: input, button, etc.
	example : cy.get('.search-keyword')
	
cy.get('locator').type('value') - Type into a DOM element.
	example : cy.get('.search-keyword').type('cauliflower')
	
How to type a value in a box and click enter? (ex:"hello" + press Enter)
   cy.get('input').type('hello{enter}')
   
cy.wait("milliseconds") - To add wait
	example : cy.wait(2000)
	
	
cy.get('locator : visible') - Handling invisible elements. this will find only visible elements and filters out the invisible elements
	example : cy.get('.product:visible');
	
cy.get('locator').find('child locator') - find calls predicate once for each element of the array, in ascending order, until it finds one where predicate returns true. If such an element is found, find immediately returns that element value. Otherwise, find returns undefined.
Returns the value of the first element in the array where predicate is true, and undefined otherwise.
	example : cy.get('.products').find('.product')
	
cy.get('locator').find('child locator').eq(index) - Get A DOM element at a specific index in an array of elements.
	 example : cy.get('.products').find('.product').eq(2);
	 
cy.contains('text') - Get the DOM element containing the text. DOM elements can contain more than the desired text and still match. Additionally, Cypress prefers some DOM elements over the deepest element found.. 
	example :  cy.get('.products').find('.product').eq(2).contains('ADD TO CART')
	
	
cy.click() - to click a button
	example : cy.get('.products').find('.product').eq(2).containsCypress('ADD TO CART').click();


each() - to iterate through an array like structure (arrays or objects with length property)
	 cy.get('.products').find('.product').each(($e1, index, $list) => {
        const textVeg = $e1.find('h4.product-name').text()

        if(textVeg.includes('Cashews')){
           cy.wrap($e1).contains('ADD TO CART').click()
        }
    
    })



wrap() - Yield the element passed into .wrap()
	// wraps DOM element
	cy.get('form').within(($form) => {
	// more commands
	cy.wrap($form).should('have.class', 'form-container')
	})
	



	
	
Difference between JQuery methods and cypress commands?	
	.text() - Get the combined text contents of each element in the set of matched elements, including their descendants. text is not a cypress command. It is a JQuery method.
	
	A resolved cypress command will return a JQuery object, using that we can use the .text() method
		
		example: cy.get('.products').find('.product').each(($e1, index, $list) => {  -> this is a resolved hence we were able to get text in next line 
				const textVeg = $e1.find('h4.product-name').text()
				cy.log(textVeg)
				})
	
	
Aliasing
	Assign an alias for later use. Reference the alias later within a cy.get() or cy.wait() command with a @ prefix. You can alias DOM elements, routes, stubs and spies.
	
	example : cy.get('.products').as('productLocator')
				
			  cy.get('@productLocator').find('.product').eq(2).contains('ADD TO CART').click();
			
			
cy.log() and console.log()	
	console.log() will print the log value in the browser console inside developer options got using ctrl+shift+i
	cy.log() - will print the log value in the run on the cypress test runner
==================================================================================================================== 
Assertions
	should - Create an assertion. Assertions are automatically retried until they pass or time out.
	Should is assertion type of Chaijs Assertion library
	
	// Assert on the href of the location
		cy.location('href').should('contain', '/tag/tutorials/')
	
	//Assert on lenght comparison
		cy.get('.product').should('have.length',4);
		Asserts that the target's length property is equal to the given number n
		

==================================================================================================================
Notes:
	Navigating to URL - visit
	Through command line, cypress runs in headless in electron
	update configurations in cypress.json which overrides exisiting behavior
	Cypress supports CSS selectors only
	We can see what happened on every step with screenshot and error message in cypress
	Handling of click, type, text()
	Iterating over the array of web elements using each
	Non cypress commands cannot resolve promise by themselves, we need to manually resolve it by then()
	Aliasing to reuse locators
	
	
===================================================================================================================	
Cypress is asynchronous, but why it is executing like its synchronous?(Important)
	Cypress is asynchronous in nature and there is no guarantee in sequence of execution, but cypress takes care of it.
	Every asynchronous step returns a promise. Promise comes with rejection, resolved (or) pending state
	.then() - this method is used to hold the execution of next step until the current step is resolved. But this is taken care by cypress. and user doesnt have to include this method each time
	So while executing it will behave like synchronous step by step execution
	
