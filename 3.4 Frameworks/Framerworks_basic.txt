Automation Framework:
	Automation framework is not a single tool or process, but it is a collection of tools and processes working together to support automated testing of any application. It integrates various functions like libraries, test data and various reusable models

Why automation Test framework is required?
	Maintain a well defined strategy across the test suites
	Enhanced speed at which testing progresses
	Maintaining the test code will be easy
	The URL or Application can be tested accurately
	Continuous testing of coding and delivery will be achieved
	
Types of automation framework
	- Linear automation framework (Tools which support record and playback follows this approach)
	- Modular driven framework (Spliting the code as modules and not based on application eg:, current UiPath project)
	- Behaviour driven framework (eg: cucumber)
	- Data driven framework (test data will basically drive the automation)
	- Keyword driven framework
	- Hybrid testing framework (Mixing of two or more frameworks)
	
TDD(Test driven development)
		Only developer or tester can understand the implementation as its purely technical language. 
		eg: TestNG
		Data driven Framework, POM all falls under this category
		Test Driven Development (TDD) is a software development approach where tests are written before the actual code.
		


Reports
Types of reports
Reports in java selenium

===========================================================================================================================================
What is selenium Framework?
	Selenium framework is a code structure for making code maintenance simpler and code readability better
	A framework involves breaking the entire code into smaller pieces of code, which test a particular functionality
	
Data driven framework:
	A data driven framework in selenium is the technique of separating the "data set" from the actual "test case" (code)
	We need to design a single test case for all scenarios and we will keep the test data in a separate file. From the file we will pass the data to the test case and the test case will iterate over the data present in the file.
	Data might vary each time test is executed but the code will not
	We will read the data from Excel file with third party library  Apache POI
	
	Requirement for DD framework:
		- Project building tool -> maven
		- Test execution tool -> TestNG
		- Read data from excel files -> Apache POI
		- Generate report -> Extent report
		
	Selenium does not contain report utility
	
	Selenium code I developed have,
		Test data - Excel - Apache POI
		Locators - Properties File 
		Build tool - Maven
		Test execution - TestNG
		Report - Extent report
		Logger - Extent logger(belongs to Extent report)
		Assert - Soft Assert is used - part of TestNG
		Screenshot - Screenshots are taken on Failure using the method created
		BaseUI class - Containing commmon methods of UI functionalities
		
Soft Assert Vs Hard assert	
============================================================================================================================
What is Page object Model Framework
	Page Object Model is a design pattern to create object repository for webUI elements
	In POM, page class will find the webElements of that webpage and also contains page methods which perform operations on those web elements
	
Why POM?
	Page object pattern says operations and flows in the UI should be separated from verification. This concept makes the code cleaner and easy to understand.
	The second benefit is the object repository is independent of test cases, so we can use the same object repository for a different purpose with different tests
	Methods get more relaistic names which can be easily mapped with the operation happening in UI
	
POM Vs PageFactory?

POM
	'Page object model' is way of representing an application in a test framework
	Finding web elements using By
	Page Object Model is a design pattern
	In POM, one needs to initialize every page object individually
	
PageFactory	
	'Page Factory' is one way of implementing the 'Page Object Model' by initializing the web elements you want to interact with within the page Object when you create an instance of it.
	Page Factory is a class provided by Selenium WebDriver to support Page Object Design pattern
	In Page Factory, testers use @FindBy annotation. The initElements method is used to initialize web elements. Similarly, one can use @FindBy with different location strategies to find web elements and perform actions on them
	In PageFactory, all page objects are initialized by using the initElements() method
	
		Annotations in Page Factory
			@FindBy: 
				This is used to identify web elements with just one defined criterion. It can be used to locate the following: id, name, className, CSS, XPath, tagName, linkText, and partialLinkText.
				
				eg:
					@FindBy(xpath = "//*[@id='signin_info']/a")
					public WebElement singoutLink;
				
			@FindBys: 
				This is used to point to web elements with more than one criteria and must match all. An AND conditional relationship is used to identify the web elements based on the various criteria defined.
			@FindAll: 
				This is similar to the @FindBys, but it needs to match at least one of the criteria. In this case, an OR conditional relationship is used.
			@CacheLookUp: 
				The end goal of this annotation is to make the code execute faster. It’s used mostly for WebElements in a test case. For the specific element, it keeps the WebElement in the cache memory after the first time it’s run.
	
	
What is POM?	
	The implementation would be like when you are performing some operation which will redirect you to a new page then that particular operation should create the object of the new page and return it
	In this particular implementation if particular operation is not navigating you on a new page, then this will not return anything or this will return something
	But if a particular function is redirecting you to a new page, then that function must return the object of the new page class
	At runtime it will return null pointer exception if it cannot find the object

Challenges with POM
	How driver instances will be shared? - Resolved with help of pageFactory
	How to handle the common functions?
	What should be return type of fucntion?
	How to handle common web Elements?
		
		
@FindBy and pageFactory are part of selenium packagae
============================================================================================================================
What is Extent report?
	Extent is open source library for rich HTML reporting for TestNG tests.
	Extent Report have very rich UI with pie charts and details logs options
	
Why use TestNG with extent report?
	TestNG by default creates some reporting, using that particular reporting, extent report works with that by creating a far more optimised report
	
	
Log4j:
	Log4j is a fast, flexible and reliable logging framework written in java
	
	Why Log4j?
		- OpenSource
		- with Log4j, it is possible to store the flow details of our automation in a file or databases.
		
	Log4j principal components:
		- Loggers - Responsible for logging information
		- Appenders
		- Layout
		
		Loggers:
			Responsible for logging information
			Primarily there are 5 kinds of log levels
				-> All - this level of logging will log everything (it turns all the logs on)
				-> Debug - Print the debugging information and is helpful in development stage
				-> Info - print informational message that highlights the progress of the application
				-> WARN - Print information regarding faulty and unexpected system behavior
				-> Error - print error message that might allow system to continue
				-> Fatal - print system critical information which are causing the application to crash
				-> off - No logging
		Appenders:
			It is used to deliver LogEvents to their destination. It decides what will happen with the log information
			ConsoleAppender logs to standard output
			File appenders prints log to some files
			Rolling file appender to a file with maximum size
			
		Layouts:
			It is responsible for formatting logging information in different styles

	
===============================================================================================================================
Why screenshots is required?
	To make debugging easy and to pinpoint the failure reason Screenshot are helpful


===============================================================================================================================
Common good practices on Automation
	Always make sure to generalize the code and data inputs and configs. So if required that can be changed in one place only.
	Maintain Configuration separately. 
	Maintain data required from user separate excel sheet
	Always maintain one Excel workboobk for datasheet. The workbook can have multiple sheets. But try to generalize the test sheet as well
	Capture screenshots on failures
	Always use try catch to catch the exceptions and put that in the report along with screenshots
	Maintain log on each function, step, UIelement. So for traceing back it'll be helpful in case of errors
	Always put yourself in the shoes of user. That will give a clear perspective.
	Generalise the code as much as possible as reusable code
	
	
How do you choose a tool/framework for automated testing?
	Some criteria when it comes to tool selection for test automation:

    -> Functionality: 
		the tool should have the necessary functionalities to create, run, report, and debug tests. Additionally, assess whether the tool’s strength (e.g., API testing) matches your testing needs most.
    -> Usability: 
		the automated testing tool should have an easy-to-navigate UI with clear instructions to help you perform your tests effectively.
    -> Scalability: 
		the tool should be scalable to meet the demands of your testing needs, both now and in the future, as your software evolves and grows.
    -> Integration: 
		a good automation testing tool should be able to integrate with other tools in your system, such as CI/CD, bug tracking, or ALM, and test management to help streamline the testing process.
    -> Support: 
		the tool should have good customer support and a vibrant community, with resources such as forums, online tutorials, and knowledge bases. 
    -> Security: 
		the tool should have adequate security measures in place to protect your data and ensure that your tests are performed securely.
    -> Reputation: 
		The tool should have a good reputation in the testing community, with positive reviews and recommendations from other users and experts.
	

	
How would you choose the right framework for a project?

Several criteria to consider when choosing a test automation framework for your project include:

    Project Requirements: 
		Assess the specific requirements of the project, including the application's complexity, supported technologies, and types of tests needed (e.g., functional, regression, performance).
    Team Expertise: 
		Evaluate the skillset and experience of the testing team members. Choose a framework that aligns with their expertise and allows them to work efficiently.
    Scalability and Reusability: 
		Look for frameworks that support scalability and encourage code reusability to avoid duplication of efforts.
    Tool Integration: 
		Consider the compatibility of the framework with the test automation tools and technologies that the team intends to use.
    Maintenance Effort: 
		Assess the effort required to maintain the test scripts and framework components in the long run.
    Community Support: 
		Check if the framework has an active community and reliable support channels to address issues and queries.
    Reporting and Logging: 
		Ensure that the framework provides comprehensive reporting and logging capabilities to aid in result analysis and debugging.
    Flexibility and Customization: 
		Look for frameworks that can be customized to meet specific project needs and accommodate future changes.
    Proof of Concept (POC): 
		Conduct a small Proof of Concept (POC) to evaluate the framework's suitability and effectiveness in addressing the project's requirements
		

How do you ensure test case reusability and maintainability in your test suites?

    Break down test cases into smaller, independent modules or functions.
    Each module should focus on testing a specific feature or functionality.
    Use a centralized object repository to store and manage object details.
    Separate object details from test scripts for easier maintenance.
    Decouple test data from test scripts using data-driven testing techniques.
    Store test data in external files (e.g., CSV, Excel, or databases) to facilitate easy updates and reusability.
    Use test automation frameworks (e.g., TestNG, JUnit, Robot Framework) to provide structure.
    Leverage libraries or utilities for common test tasks, such as logging, reporting, and data handling.
	