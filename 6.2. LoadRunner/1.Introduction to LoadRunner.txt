Components of LR
1. Virtual user generator
2. Controller
3. Analyzer
4. Load generator (LG) or Agent Machine or Load injector


Performance testing life cycle
1. Non functional requirement gathering and analysis - NFR
2. Test strategy and planning - Test plan
3. Test design and Development - Test Script (VuGen)
4. Test execution - Test results (CONTROLLER)
5. Test Result analysis - Test reports (ANALYSIS)

====================================
Virtual user Generator(VuGen)
-> VuGen is the main component of LR which is used to create scripts to simulate user actions on the Application under Test(AUT)
-> Scripts are created in C language or Javascript language
-> The scripts are usually generated by recording the events between client and server.
-> VuGen component provides the performance tester with the replay option
-> With VuGen, Playback can be done with only one virtual user
-> Note: Scripts are executed using VuGen for not applying the load. It is done only for debugging purpose.

Virtual User Script
	The actions performed by the human users are recorded in the form of a script. The scripts when replayed emulate the real user performing the business actions.
	
Controller
	When you playback the script with certain number of users, only then we can create the load
	Using Controller all the scripts will be executed simultaneously.
	Not only simultaneously but with certain user load.
	After the scenario execution, Controller is responsible for collecting and organizing the performance data
	Controller is configured to 
		-> Number of Vusers
		-> Number of scripts to be executed
	"Shakedown test / Dry Run test" is usually recommended before the actual test

	Purpose of Dry Run test/ Shakedown Test
		-> Are my scripts working fine?
		-> Is my environment up & running and not having any issues?
		-> Are there any issues in my data?
		-> Are there are any issues with my LGs?
		
Analyzer
	-> This component will provide the test results
	-> On further analysis of this test results, one can identify performance bottlenecks of the application under test
	-> Test report can also be prepared using this component
	
Load generator
	-> Load generators are systems that will create Virutal users
	-> Depending on the hardware configuration of the LG, number of Vusers generated by LG changes
	-> LG/ Agent software is installed on the machine.
	-> Controller component of LR has the ability to control multiple load generators.
	-> Also remember, that you Vusers script will be downloaded to LG machines during the scenario execution. So, results needs to be collated by controller from all the LGs after the execution
	-> User needs to have the appropriate license to access Load Generator and controller
	-> From LG the collate results function collate run data
	
==============================================================================	
	
LoadRunner Architecture  (Basically on a enterprise workspace since controller license is costly.)

VuGen     -------->  Controller  -- Results collated  ---> Analysis
(Performance         (Separate machine)                    (Performance
testers machine)    |          /                             testers machine)
					|         /
					|        / (Result for script1 & script2 sent back to controller)
					|       /
				Load             --->    Application under
				generators       <---      Test
                (Separate machine)

Collating - combining 

Controller collates the results from the LG and send it analysis

When we install LR on our local machine, VuGen, Controller , analysis, LG all are installed in our machine. And our system is the only LG
===============================================

LoadRunner Basic flow
Plan Load test -> Create Vuser script -> Create scenarios -> Run scenarios -> Analyze results -> Tune system based on analysis
(VuGen)										(Controller)			/|\                                      |
																	 |                                       |
																	 -----------------------------------------
																						 
================================================
Calculation of Load Generators

Number of Vuser this LG can support totally depends on the memory footprint
Memory footprint is the amount of physical memory that a program uses or references while it runs.
The word footprint generally refers to the extent of physical dimensions that an object occupies, giving a sense of its size
Memory footprint will vary from Protocol to protocol and tool to tool

For example, memory footprint for HTTP/HTML protocol in LR is 2.3 mb RAM for each Vuser
 
	2.3mb = 1Vuser
	500mb = ?(x)           x = 217.3 = 217    (~200vusers)

for 500 mb 217 Vusers can be generated from the LG.  We shouldn't take the complete end value. So approx we'll have 200 Vusers

	1LG - 217Vusers
	(x)? - 1000Vusers   x = 4.6 ~ 5(approx)

